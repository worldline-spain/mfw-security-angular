!function(){"use strict";function a(){this.$get=["$log","$rootScope","$timeout","$mfwSecurityRouteInterceptorConfig","$mfwSecurity","$state","$mfwSecurityConfig",function(a,b,e,f,g,h,i){function j(){k(),A=f.defaultState,z=r(),b.$on("$stateChangeStart",l),b.$on("$stateChangeError",m),b.$on(i.EVENT_LOGIN,o),b.$on(i.EVENT_LOGOUT,p)}function k(){function b(b){a.error("Configuration error:",b)}f.avoidLoginStateWhenLoggedIn===!0&&angular.isUndefined(f.defaultState)&&b("avoidLoginStateWhenLoggedIn=true, defaultState=undefined"),f.forwardToDefaultStateAfterLogin===!0&&angular.isUndefined(f.defaultState)&&b("forwardToDefaultStateAfterLogin=true, defaultState=undefined")}function l(b,c,d){function h(){b.preventDefault(),n(c,d)}var i=g.isLogged();s(c)&&i&&f.avoidLoginStateWhenLoggedIn===!0?A?(a.debug("Stopping transition to login state as user is already logged in. Will be redirected to default state",A),h(),e(function(){y(A)})):a.error("Tried to avoid login state for a logged user, but no default state is configured."):u(c,d)?a.debug("Has access to state, continue with state change event."):(a.warn("Stopping transition to state",c.name),h(),w(),f.forwardToLoginAfterStoppedTransition===!0&&y(z))}function m(b,c,d,e,g,h){401===h.status&&(a.error("State change due to 401 server response. Perform logout."),f.forwardToRestrictedStateAfterLogin===!0&&n(c,d),q())}function n(a,b){B=angular.isString(a)?a:a.name,C=b}function o(){function b(){f.forwardToDefaultStateAfterLogin===!0&&A&&(a.debug("Transition to default state after login:",A),y(A))}B?(f.forwardToRestrictedStateAfterLogin===!0?(a.log("Redirecting to restricted state after login:",B),y(B,C)):b(),B=null):b()}function p(){f.forwardToLoginAfterLogout===!0&&(z?(a.log("Redirecting to login state after logout."),y(z)):a.warn("There's no configured login state to be redirected after logout."))}function q(){g.logout()}function r(){var b,c=f.loginState;angular.isDefined(c)&&(a.debug("Configured in constants the login state",c),b=h.get(c),b||a.warn("There's no state with name",c));var d=h.get().filter(s);if(d.length>1)throw new Error("More than one state is tagged as login.");if(1===d.length){var e=d[0];b?a.debug("Overriding login state with ",e.name):a.debug("Found login state",e.name),b=e}return b||a.warn("There's no state tagged as login state."),b}function s(a){var b=t(a);return b.login===!0||a.name===f.loginState}function t(a){var b=a.data||{};return c&&(b=b[c]||{}),b}function u(b,c){var d=t(b),e=d.permissions,h=g.isLogged(),i=!0;return v(b)?(a.debug("Public access to state",b.name),i=!0):e?angular.isString(e)||angular.isArray(e)?i=g.hasAnyPermission(e):angular.isObject(e)?e.all?i=g.hasAllPermissions(e.all):e.any?i=g.hasAnyPermission(e.any):a.warn("Unkown permissions setting in state",b.name):a.warn("Unkown permissions setting in state",b.name):f.publicByDefault!==!0?(a.debug("State",b.name,"has no permissions defined, and setting publicByDefault is set to false."),i=h,h?a.debug("User is logged in so he has access to state",b.name):a.debug("User is not logged in so he has no access to state",b.name)):(a.debug("State",b.name,"has no permissions defined, and setting publicByDefault is set to true."),i=!0),i}function v(a){var b=t(a),c=b.permissions;return b["public"]===!0||s(a)||(!c||!c.length)&&f.publicByDefault}function w(){x(d)}function x(a,c){b.$broadcast(a,c)}function y(a,b){h.go(a,b)}var z,A,B,C,D={init:j};return D}]}var b=angular.module("mfw.security.route-interceptor.uirouter",["mfw.security","ui.router"]);b.run(["$mfwSecurityRouteInterceptor",function(a){a.init()}]);var c=null,d="$mfwSecurityStateTransitionStopped";b.constant("$mfwSecurityRouteInterceptorConfig",{publicByDefault:!0,loginState:void 0,defaultState:void 0,forwardToDefaultStateAfterLogin:!1,forwardToLoginAfterLogout:!0,forwardToRestrictedStateAfterLogin:!1,forwardToLoginAfterStoppedTransition:!1,avoidLoginStateWhenLoggedIn:!0}),b.provider("$mfwSecurityRouteInterceptor",a)}();
//# sourceMappingURL=mfw-security-route-interceptor-uirouter.service.min.js.map